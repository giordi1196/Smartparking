services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092  
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - backend
      
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - backend
      
  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
      
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    restart: always
    
   # Microservizio Parking
  parking-service:
    build:
      context: ./parking-service # Percorso relativo alla cartella con il Dockerfile di parking-service
    container_name: parking-service
    ports:
      - "8082:8080"  # Esponi la porta 8080 del container sulla 8082 del host
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - kafka
      - mongo
    networks:
      - backend

  # Microservizio Notification (aggiungiamo uno per esempio)
  notification-service:
    build:
      context: ./notification-service # Percorso relativo alla cartella con il Dockerfile di notification-service
    container_name: notification-service
    ports:
      - "8083:8080"  # Esponi la porta 8080 del container sulla 8083 del host
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - kafka
    networks:
      - backend
  
  
  # Microservizio Booking
  booking-service:
    build:
      context: ./booking-service # Percorso relativo alla cartella con il Dockerfile di booking-service
    container_name: booking-service
    ports:
      - "8084:8080"  
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - kafka
      - mongo
    networks:
      - backend

volumes:
  mongo-data:

networks:
  backend:
    driver: bridge